# -*- org -*-
#+STARTUP: indent showall lognotedone
#+TODO: TODO(t) WIP(p) MAYBE(m) | CANCELED(c) DONE(d)
#+OPTIONS: tasks:todo

* WIP Features
** WIP More autodiscovery
*** DONE UID/GID discovery
CLOSED: [2012-03-20 Tue 11:47]
Cached by default, should be able to turn of caching with the global
LOG_CEE_NOCACHE flag, and also with LOG_CEE_NOCACHE_UID flag.
*** TODO Thread-id discovery
Not cached by default, but can be turned on with
LOG_CEE_CACHE_TID. This is linux-specific, and glibc does not provide
a wrapper, so this also needs some configure-time discovery.
*** TODO Timestamp in the payload
Not enabled by default, can be toggled on with LOG_CEE_TIMESTAMP. 
**** What precision do we want?
*** DONE Hostname in the payload
CLOSED: [2012-03-21 Wed 12:53]
- CLOSING NOTE [2012-03-21 Wed 12:53] \\
  Done, we use gethostname(), as that's the easiest that yields somewhat
  useful results.
Do we want it, at all? If so, cache gethostname() and be happy, or is
there any other, better way?

* WIP Documentation
** TODO cee-syslog(3)
The main entry point of the documentation, will detail the purpose and
goals of the library, along with the functions and constants it
provides. cee_syslog(), cee_vsyslog(), cee_legacy_*(), cee_openlog()
and cee_setlogmask() will be aliases to this page - similar how the
syslog functions are documented. 

It makes much more sense to have a single page for them all.

* DONE Test suite
CLOSED: [2012-03-20 Tue 12:29]
- CLOSING NOTE [2012-03-20 Tue 12:29] \\
  Test suite is in place.
The test suite cannot test the syslog calls themselves, as that would
be way too hacky to do properly. So it will test cee_format() instead,
which is used by the syslog calls anyway.

** DONE Decide how to test the library
CLOSED: [2012-03-20 Tue 12:29]
- CLOSING NOTE [2012-03-20 Tue 12:29] \\
  It's decided, I'll do just that.
I believe the best way to test would be to re-parse the JSON, extract
the fields, and verify they're of the expected value and type.

* TODO Examples
While the test suite will provide some easier examples, it would be
nice to have a bigger example program that show-cases all the function
calls, with detailed documentation about the pitfalls, too.

*** MAYBE Forked and threaded example?
Ideally, this example would also fork and thread, just to be able to
document how those things are affected.
